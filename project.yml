title: "Content Metadata NER"
description: "A project for building a lanuage model for HM Governmentt"
spacy_version: ">=3.0.6,<4.0.0"

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "govuk-ner-pipeline"
  lang: "en"
  vectors_model: "en_core_web_lg"
  files:
    train_file: "mark_goppepdm.jsonl"
  prodigy:
    train_dataset: "mark_goppepdm"
  models:
    model: "en_${vars.prodigy.train_dataset}"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["data", "configs", "src", "models", "packages"]

# Assets that should be downloaded or available in the directory.
assets:
  - dest: "data/gold/mark_goppepdm.json"
    description: "JSONL-formatted training data exported from Prodigy (2970 examples)"


# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - db-in
    - train_prodigy
    - train_curve

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download a spaCy model with pretrained vectors"
    script:
      - "python -m spacy download ${vars.vectors_model}"

  - name: "db-in"
    help: "Load data into prodigy (only for example purposes)"
    script:
      - "python -m prodigy db-in ${vars.prodigy.train_dataset} data/gold/${vars.files.train_file}"
    deps:
      - "data/gold/${vars.files.train_file}"

  - name: "train_prodigy"
    help: "Train a named entity recognition model with Prodigy"
    script:
      - "python -m prodigy train --ner ${vars.prodigy.train_dataset} models/${vars.prodigy.train_dataset} --config configs/${vars.config} --eval-split 0.2 --label-stats"
    outputs:
      - "models/${vars.prodigy.train_dataset}/model-best"


  - name: "train_curve"
    help: "Train the model with Prodigy by using different portions of training examples to evaluate if more annotations can potentially improve the performance"
    script:
      - "python -m prodigy train-curve --ner ${vars.prodigy.train_dataset} --show-plot"
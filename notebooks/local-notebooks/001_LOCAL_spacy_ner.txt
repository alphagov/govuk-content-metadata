{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NER with spaCy\n",
    "\n",
    "This is a notebook that explores the effectiveness of a 'vanilla' pre-trained language model from spaCy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Installs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install spacy\n",
    "# !python3 -m spacy download en_core_web_sm\n",
    "# !pip install s3fs\n",
    "# !pip install boto\n",
    "# !pip install boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import boto\n",
    "import boto3\n",
    "import pandas as pd\n",
    "import s3fs\n",
    "import spacy\n",
    "import spacy.displacy as displacy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pipeline Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nlp = spacy.load(\n",
    "    \"en_core_web_sm\"\n",
    ")  # define a pipeline with a language model. English pipeline optimized for CPU. Components: tok2vec, tagger, parser, senter, ner, attribute_ruler, lemmatizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = \"STSM077030 - Companies and shareholders: company takeovers: Stamp Duty on block transfer Once a takeover offer is declared unconditional,\\\n",
    "    all the acceptances received up to that date are usually included in one ‘block transfer’- a single stock transfer form with an accompanying \\\n",
    "    schedule setting out the total number of shares in the target company to be transferred to the offeror, together with the consideration payable for each. \\\n",
    "    Stamp Duty will be chargeable on the amount or value of the consideration for each transfer, and should be set out in the schedule accompanying the stock transfer form.\\\n",
    "    STSM021190 provides more information on block transfers, including where the block transfer contains transfers on sale involving individual \\\n",
    "    shareholders where the consideration does not exceeed £1,000 and so may benefit from a £1,000 certificate of value and  not attract a Stamp Duty charge. \\\n",
    "    Separate block transfers must be prepared in respect of chargeable and non chargeable transfers. \\\n",
    "    STSM077040 - STSM077060 give details of how Stamp Duty is calculated on different types of consideration given for transfers of securities under a takeover. \\\n",
    "    Further block transfers will often be executed, for example covering acceptances received during a specified period after the offer is declared unconditional,\\\n",
    "    and/or to cover compulsory acquisitions from minority shareholders under section 979 Companies Act 2006.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "doc = nlp(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for ent in doc.ents:\n",
    "    print(ent.text, ent.start_char, ent.end_char, ent.label_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "displacy.render(doc, style=\"ent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_vis_ents(text):\n",
    "    doc = nlp(text)\n",
    "    # for ent in doc.ents:\n",
    "    # print(ent.text, ent.start_char, ent.end_char, ent.label_)\n",
    "    displacy.render(doc, style=\"ent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "find_vis_ents(text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Integrate Doccano Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ner_data_file = \"../data/processed/line_by_line_NER_data_sampled_12062020_more_ents.csv\"\n",
    "\n",
    "df = pd.read_csv(ner_data_file, sep=\"\\t\", low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df[\"text\"][:10]:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df[\"text\"][:10]:\n",
    "    print(i)\n",
    "    find_vis_ents(i)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "cb78078aff4f0fca0b87149217d885ad4dd99935d8eaa10d490c5420d431fcbd"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 64-bit ('govuk-content-metadata': venv)",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
